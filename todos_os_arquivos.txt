```index.php
<?php

use generic\Controller;

include_once "generic/AutoLoad.php";


if(isset($_GET['param'])){
    $controller = new Controller();

    $controller->verificarCaminho($_GET['param']);

}
```

```README.md
# mvc20242
mvc20242

```

```banco.sql
-- banco.sql

CREATE TABLE Usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    senha VARCHAR(255) NOT NULL,
    criado_em DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Desafios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    titulo VARCHAR(100) NOT NULL,
    descricao TEXT,
    data_inicio DATE NOT NULL,
    data_fim DATE NOT NULL,
    criado_por INT,
    FOREIGN KEY (criado_por) REFERENCES Usuarios(id) ON DELETE SET NULL,
    criado_em DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Progresso (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT NOT NULL,
    desafio_id INT NOT NULL,
    progresso INT DEFAULT 0,
    data_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES Usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (desafio_id) REFERENCES Desafios(id) ON DELETE CASCADE
);

```

```.htaccess
RewriteEngine On 
RewriteCond %{REQUEST_FILENAME} !-f 
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.+)$ index.php?param=$1 [QSA,L]
```

```dao/interface/IProgressoDAO.php
<?php
namespace dao\interface;

interface IProgressoDAO{
    public function listar();
    public function registrarProgresso($usuario_id, $desafio_id, $progresso);
}
?>

```

```dao/interface/IUsuarioDAO.php
<?php
namespace dao\interface;

interface IUsuarioDAO{
    public function listar();
    public function criar($nome, $email, $senha);
    public function login($email, $senha);
}
?>

```

```dao/interface/IDesafioDAO.php
<?php
namespace dao\interface;

interface IDesafioDAO{
    public function listar();
    public function criar($titulo, $descricao, $data_inicio, $data_fim, $criado_por);
    public function participar($usuario_id, $desafio_id);
    public function registrarProgresso($usuario_id, $desafio_id, $progresso);
}
?>

```

```dao/mysql/DesafioDAO.php
<?php
namespace dao\mysql;

use dao\interface\IDesafioDAO;
use generic\MysqlFactory;

class DesafioDAO extends MysqlFactory implements IDesafioDAO{

    public function listar(){
        $sql = "SELECT * FROM Desafios";
        return $this->banco->executar($sql);
    }

    public function criar($titulo, $descricao, $data_inicio, $data_fim, $criado_por){
        $sql = "INSERT INTO Desafios (titulo, descricao, data_inicio, data_fim, criado_por) VALUES (:titulo, :descricao, :data_inicio, :data_fim, :criado_por)";
        $param = [
            "titulo" => $titulo,
            "descricao" => $descricao,
            "data_inicio" => $data_inicio,
            "data_fim" => $data_fim,
            "criado_por" => $criado_por
        ];
        $this->banco->executar($sql, $param);
        return ["message" => "Desafio criado com sucesso"];
    }

    public function participar($usuario_id, $desafio_id){
        $sql = "INSERT INTO Progresso (usuario_id, desafio_id) VALUES (:usuario_id, :desafio_id)";
        $param = [
            "usuario_id" => $usuario_id,
            "desafio_id" => $desafio_id
        ];
        $this->banco->executar($sql, $param);
        return ["message" => "Participação registrada com sucesso"];
    }

    public function registrarProgresso($usuario_id, $desafio_id, $progresso){
        $sql = "UPDATE Progresso SET progresso = :progresso, data_registro = CURRENT_TIMESTAMP WHERE usuario_id = :usuario_id AND desafio_id = :desafio_id";
        $param = [
            "progresso" => $progresso,
            "usuario_id" => $usuario_id,
            "desafio_id" => $desafio_id
        ];
        $this->banco->executar($sql, $param);
        return ["message" => "Progresso atualizado com sucesso"];
    }
}
?>

```

```dao/mysql/ProgressoDAO.php
<?php
namespace dao\mysql;

use dao\interface\IProgressoDAO;
use generic\MysqlFactory;

class ProgressoDAO extends MysqlFactory implements IProgressoDAO{

    public function listar(){
        $sql = "SELECT * FROM Progresso";
        return $this->banco->executar($sql);
    }

    public function registrarProgresso($usuario_id, $desafio_id, $progresso){
        $sql = "UPDATE Progresso SET progresso = :progresso, data_registro = CURRENT_TIMESTAMP WHERE usuario_id = :usuario_id AND desafio_id = :desafio_id";
        $param = [
            "progresso" => $progresso,
            "usuario_id" => $usuario_id,
            "desafio_id" => $desafio_id
        ];
        $this->banco->executar($sql, $param);
        return ["message" => "Progresso registrado com sucesso"];
    }
}
?>

```

```dao/mysql/UsuarioDAO.php
<?php
namespace dao\mysql;

use dao\interface\IUsuarioDAO;
use generic\MysqlFactory;

class UsuarioDAO extends MysqlFactory implements IUsuarioDAO{

    public function listar(){
        $sql = "SELECT id, nome, email, criado_em FROM Usuarios";
        return $this->banco->executar($sql);
    }

    public function criar($nome, $email, $senha){
        $sql = "INSERT INTO Usuarios (nome, email, senha) VALUES (:nome, :email, :senha)";
        $param = [
            "nome" => $nome,
            "email" => $email,
            "senha" => password_hash($senha, PASSWORD_BCRYPT)
        ];
        $this->banco->executar($sql, $param);
        return ["message" => "Usuário criado com sucesso"];
    }

    public function login($email, $senha){
        $sql = "SELECT * FROM Usuarios WHERE email = :email";
        $param = ["email" => $email];
        $resultado = $this->banco->executar($sql, $param);
        if(count($resultado) > 0 && password_verify($senha, $resultado[0]['senha'])){
            // Aqui você pode implementar a geração de tokens ou sessões
            return ["message" => "Login bem-sucedido", "usuario_id" => $resultado[0]['id']];
        }
        return ["error" => "Credenciais inválidas"];
    }
}
?>

```

```template/ITemplate.php
<?php
namespace template;
interface ITemplate {
    public function cabecalho();
    public function rodape();

 
}
?>
```

```template/UsuarioTemp.php
<?php
namespace template;

class UsuarioTemp implements ITemplate {
    public function cabecalho(){
        echo "<div> usuario cabecalho</div>";
    }
    public function rodape(){
        echo "<div> usuario rodape</div>";
    }

    
}
?>
```

```controller/UsuariosController.php
<?php
namespace controller;

use service\UsuarioService;

class UsuariosController {

    private $usuarioService;

    public function __construct(){
        $this->usuarioService = new UsuarioService();
    }

    // GET /usuarios/listar
    public function listarUsuarios(){
        $usuarios = $this->usuarioService->listarUsuarios();
        echo json_encode($usuarios);
    }

    // POST /usuarios/criar
    public function criarUsuario($nome, $email, $senha){
        $resultado = $this->usuarioService->criarUsuario($nome, $email, $senha);
        echo json_encode($resultado);
    }

    // POST /usuarios/login
    public function login($email, $senha){
        $resultado = $this->usuarioService->login($email, $senha);
        echo json_encode($resultado);
    }
}
?>

```

```controller/DesafiosController.php
<?php
namespace controller;

use service\DesafioService;

class DesafiosController {

    private $desafioService;

    public function __construct(){
        $this->desafioService = new DesafioService();
    }

    // GET /desafios/listar
    public function listarDesafios(){
        $desafios = $this->desafioService->listarDesafios();
        echo json_encode($desafios);
    }

    // POST /desafios/criar
    public function criarDesafio($titulo, $descricao, $data_inicio, $data_fim, $criado_por){
        $resultado = $this->desafioService->criarDesafio($titulo, $descricao, $data_inicio, $data_fim, $criado_por);
        echo json_encode($resultado);
    }

    // POST /desafios/participar
    public function participarDesafio($usuario_id, $desafio_id){
        $resultado = $this->desafioService->participarDesafio($usuario_id, $desafio_id);
        echo json_encode($resultado);
    }

    // POST /desafios/progresso
    public function registrarProgresso($usuario_id, $desafio_id, $progresso){
        $resultado = $this->desafioService->registrarProgresso($usuario_id, $desafio_id, $progresso);
        echo json_encode($resultado);
    }
}
?>

```

```controller/ProgressosController.php
<?php
namespace controller;

use service\ProgressoService;

class ProgressosController {

    private $progressoService;

    public function __construct(){
        $this->progressoService = new ProgressoService();
    }

    // GET /progresso/listar
    public function listarProgresso(){
        $progresso = $this->progressoService->listarProgresso();
        echo json_encode($progresso);
    }

    // POST /progresso/registrar
    public function registrarProgresso($usuario_id, $desafio_id, $progresso){
        $resultado = $this->progressoService->registrarProgresso($usuario_id, $desafio_id, $progresso);
        echo json_encode($resultado);
    }
}
?>

```

```public/NaoExiste.php
<html>
    <body>
        Rota não existe!
    </body>
</html>
```

```public/AlterarCliente.php
<form action="/mvc20242/cliente/salvarAlterar" method="POST">
    <input type="hidden" name="id" value="<?= $param["id"]?>" />
    <label>Nome:</label></br>
    <input type="text" name="nome" value="<?= $param["nome"] ?>" />
    </br>
    <input type="submit" value="Enviar" />
</form>
```

```public/ListaCliente.php

        <h2>Clientes</h2>
        <table>
            <tr>
                <th>ID</th>
                <th>Nome</th>
                <th>Alterar</th>
            </tr>
           <?
           foreach ($param as $valor){
            ?>
            <tr>
                <td><?= $valor["id"] ?></td>
                <td><?= $valor["nome"]?></td>
                <td><a href="/mvc20242/cliente/alterar?id=<?= $valor["id"]?>">Aterar</a></td>
            </tr>
            <?
           }
           ?>
        </table>
     


```

```view/ClienteView.php
<?php

namespace view;

use generic\View;
use template\UsuarioTemp;

class ClienteView extends View
{
    public function __construct()
    {
        parent::__construct(new UsuarioTemp());
    }
    public function listaClientes($dados)
    {
        
        $this->conteudo("public/ListaCliente.php",$dados);
    }

    public function alterarClientes($dados)
    {
        
        $this->conteudo("public/AlterarCliente.php",$dados);
    }
}

```

```generic/AutoLoad.php
<?php
spl_autoload_register(function ($class){
   
    include $class.".php";
});
```

```generic/Controller.php
<?php
namespace generic;

use ReflectionMethod;

class Controller{
   
    private $arrChamadas=[];
    
    public function __construct(){
        $this->arrChamadas = [
            // Desafios (Novo)
            "desafios/listar" => [
                "controller\DesafiosController",
                "listarDesafios",
                ["GET"]
            ],
            "desafios/criar" => [
                "controller\DesafiosController",
                "criarDesafio",
                ["POST"]
            ],
            "desafios/participar" => [
                "controller\DesafiosController",
                "participarDesafio",
                ["POST"]
            ],
            "desafios/progresso" => [
                "controller\DesafiosController",
                "registrarProgresso",
                ["POST"]
            ],
            
            // Usuários (Novo)
            "usuarios/listar" => [
                "controller\UsuariosController",
                "listarUsuarios",
                ["GET"]
            ],
            "usuarios/criar" => [
                "controller\UsuariosController",
                "criarUsuario",
                ["POST"]
            ],
            "usuarios/login" => [
                "controller\UsuariosController",
                "login",
                ["POST"]
            ],
            
            // Progresso (Novo)
            "progresso/listar" => [
                "controller\ProgressosController",
                "listarProgresso",
                ["GET"]
            ],
            "progresso/registrar" => [
                "controller\ProgressosController",
                "registrarProgresso",
                ["POST"]
            ],
        ];
    }

    public function verificarCaminho($rota){
        $requestMethod = $_SERVER['REQUEST_METHOD'];
        
        if(isset($this->arrChamadas[$rota])){
            list($controllerClass, $method, $allowedMethods) = $this->arrChamadas[$rota];
            
            if(!in_array($requestMethod, $allowedMethods)){
                http_response_code(405);
                echo json_encode(["error" => "Método não permitido"]);
                return;
            }

            if(class_exists($controllerClass)){
                $controller = new $controllerClass();
                
                if(method_exists($controller, $method)){
                    $reflection = new ReflectionMethod($controller, $method);
                    $params = $this->getParams($reflection);
                    $reflection->invokeArgs($controller, $params);
                    return;
                }
            }

            // Caso a classe ou método não exista
            http_response_code(404);
            echo json_encode(["error" => "Endpoint não existe"]);
            return;
        }

        // Rota não encontrada
        http_response_code(404);
        echo json_encode(["error" => "Endpoint não existe"]);
    }

    private function getParams(ReflectionMethod $method){
        $params = [];
        $inputData = [];
    
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $contentType = $_SERVER["CONTENT_TYPE"] ?? '';
            if (stripos($contentType, 'application/json') !== false) { // ou str_contains mesmo
                $rawInput = file_get_contents("php://input");
                $inputData = json_decode($rawInput, true) ?? [];
            } else {
                $inputData = $_POST;
            }
        }
    
        foreach($method->getParameters() as $param){
            $name = $param->getName();
            $params[] = $inputData[$name] ?? null;
        }
        return $params;
    }
}
?>

```

```generic/View.php
<?php
namespace generic;

use template\ITemplate;

class View {
    private ITemplate $template;    
    public function __construct($template)
    {
        $this->template=$template;
    }
    public function conteudo($caminho,$param = null){
        echo $this->template->cabecalho();
        include $caminho;
        echo $this->template->rodape();
    }
}
?>
```

```generic/Acao.php
<?php
namespace generic;
class Acao{
    private $classe;
    private $metodo;
    
    public function __construct($classe,$metodo){
        $this->classe=$classe;
        $this->metodo = $metodo;
    }

    public function executar(){
        $obj = new $this->classe();
        $obj->{$this->metodo}();
    }


}

?>
```

```generic/MysqlSingleton.php
<?php

namespace generic;

use PDO;

class MysqlSingleton
{
    private static $instance = null;

    private $conexaoPDO = null;
    private $dsn = "mysql:host=localhost;dbname=fitness";
    private $username = "root";
    private $password = "";

    private function __construct()
    {
        if ($this->conexaoPDO == null) {

            $this->conexaoPDO = new PDO($this->dsn, $this->username, $this->password);
            $this->conexaoPDO->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        }
    }
    public static function getInstance()
    {

        if (self::$instance == null) {
            self::$instance = new MysqlSingleton();
        }
        
        return self::$instance;
    }

    public function executar($sql, $param = array())
    {
        if ($this->conexaoPDO != null) {
            $sth = $this->conexaoPDO->prepare($sql);
            foreach ($param as $key => &$value) {
                $sth->bindParam($key, $value, PDO::PARAM_STR);
            }
            $sth->execute();
            return $sth->fetchAll(PDO::FETCH_ASSOC);
        }
    }
}

```

```generic/MysqlFactory.php
<?php
namespace generic;

class MysqlFactory{
    public ?MysqlSingleton $banco;

    public function __construct()
    {

        $this->banco = MysqlSingleton::getInstance();
      
    }
}
?>
```

```service/DesafioService.php
<?php
namespace service;

use dao\mysql\DesafioDAO;

class DesafioService extends DesafioDAO{

    public function listarDesafios(){
        return parent::listar();
    }

    public function criarDesafio($titulo, $descricao, $data_inicio, $data_fim, $criado_por){
        return parent::criar($titulo, $descricao, $data_inicio, $data_fim, $criado_por);
    }

    public function participarDesafio($usuario_id, $desafio_id){
        return parent::participar($usuario_id, $desafio_id);
    }

    public function registrarProgresso($usuario_id, $desafio_id, $progresso){
        return parent::registrarProgresso($usuario_id, $desafio_id, $progresso);
    }
}
?>

```

```service/ProgressoService.php
<?php
namespace service;

use dao\mysql\ProgressoDAO;

class ProgressoService extends ProgressoDAO{

    public function listarProgresso(){
        return parent::listar();
    }

    public function registrarProgresso($usuario_id, $desafio_id, $progresso){
        return parent::registrarProgresso($usuario_id, $desafio_id, $progresso);
    }
}
?>

```

```service/UsuarioService.php
<?php
namespace service;

use dao\mysql\UsuarioDAO;

class UsuarioService extends UsuarioDAO{

    public function listarUsuarios(){
        return parent::listar();
    }

    public function criarUsuario($nome, $email, $senha){
        return parent::criar($nome, $email, $senha);
    }

    public function login($email, $senha){
        return parent::login($email, $senha);
    }
}
?>

```

